МНОГОТАБЛИЧНЫЕ
№1 Вывести все имена и фамилии студентов, и название хобби, которым занимается этот студент.

SELECT st.name, st.surname, hb.name
FROM student st, hobby1 hb, student_hobby sh
WHERE sh.student_id = st.id AND sh.hobby_id = hb.id

№2 Вывести информацию о студенте, занимающимся хобби самое продолжительное время.
SELECT st.name, st.surname, sh.date_start
FROM student st, student_hobby sh
WHERE st.id = sh.student_id AND sh.date_finish IS NULL
ORDER BY sh.date_start
LIMIT 1

№3 Вывести имя, фамилию, номер зачетки и дату рождения для студентов, средний балл которых выше среднего, а сумма риска всех хобби, которыми он занимается в данный момент, больше 0.9.
SELECT DISTINCT st.n_group
FROM student st
INNER JOIN(
SELECT st.name,st.surname, st.id
FROM student st
INNER JOIN
(SELECT DISTINCT sh.student_id, extract(day from (justify_days(now() - sh.date_start))) as countofdays
FROM student_hobby sh
WHERE sh.date_finish IS NULL
ORDER BY countofdays DESC) tt
ON tt.student_id = st.id
ORDER BY countofdays DESC LIMIT 10
) tt
ON tt.id = st.id

№4 Вывести фамилию, имя, зачетку, дату рождения, название хобби и длительность в месяцах, для всех завершенных хобби Диапазон дат.
SELECT st.name, st.surname, st.n_group, st.date_birth, tt.monthes, tt.name
FROM student st
INNER JOIN
(SELECT (to_char(sh.date_finish, 'MM')::numeric(10,0) + to_char(sh.date_finish, 'YYYY')::numeric(10,0) * 12) - (to_char(sh.date_start, 'MM')::numeric(10,0) + to_char(sh.date_start, 'YYYY')::numeric(10,0) * 12) as monthes, sh.student_id, hb.name
FROM student_hobby sh, hobby1 hb
WHERE hb.id = sh.id) tt
ON tt.student_id = st.id

№5 Вывести фамилию, имя, зачетку, дату рождения студентов, которым исполнилось N полных лет на текущую дату, и которые имеют более 1 действующего хобби.
SELECT st.name, st.surname, st.n_group, st.date_birth
FROM student st
INNER JOIN
(SELECT count(sh.hobby_id), sh.student_id
FROM student_hobby sh, hobby1 hb
WHERE hb.id = sh.hobby_id
GROUP BY sh.student_id
HAVING count(sh.hobby_id) >1) tt
ON tt.student_id = st.id
WHERE 3 = ((to_char('2024-03-19'::date, 'YYYY')::int * 12 * 30 + to_char('2024-03-19'::date, 'MM')::int * 30 + to_char('2024-03-19'::date, 'DD')::int) - (to_char(st.date_birth, 'YYYY')::int * 12 * 30 + to_char(st.date_birth, 'MM')::int * 30 + to_char(st.date_birth, 'DD')::int))/ 30 / 12

№6 Найти средний балл в каждой группе, учитывая только баллы студентов, которые имеют хотя бы одно действующее хобби.
SELECT DISTINCT st.n_group, avg(st.score)::numeric(3,2)
FROM student st
INNER JOIN(SELECT DISTINCT sh.student_id
FROM student_hobby sh, hobby1 hb
WHERE sh.hobby_id = hb.id AND sh.date_finish IS NULL) tt
ON tt.student_id = st.id
GROUP BY st.n_group

№7 Найти название, риск, длительность в месяцах самого продолжительного хобби из действующих, указав номер зачетки студента.
SELECT hb.name, hb.risk, -1 * (to_char(tt.dlit, 'YYYY')::numeric(5,0) * 12 + to_char(tt.dlit, 'MM')::numeric(5,0)) + (to_char(now(), 'YYYY')::numeric(5,0) * 12 + to_char(now(),'MM')::numeric(5,0))
FROM hobby1 hb
INNER JOIN(
SELECT sh.hobby_id, min(sh.date_start) as dlit, sh.student_id
FROM student_hobby sh
GROUP BY sh.student_id, sh.hobby_id
HAVING sh.student_id = 3
LIMIT 1) tt
ON tt.hobby_id = hb.id

№8 Найти все хобби, которыми увлекаются студенты, имеющие максимальный балл.
SELECT hb.name
FROM student st
INNER JOIN student_hobby sh on sh.student_id = st.id
INNER JOIN hobby1 hb on hb.id = sh.hobby_id
WHERE st.score = (SELECT max(st.score)
FROM student st)

№13 Вывести номер зачётки, фамилию и имя, дату рождения и номер курса для всех отличников, не имеющих хобби. Отсортировать данные по возрастанию в пределах курса по убыванию даты рождения.
SELECT st.id, st.name, st.surname, st.date_birth, SUBSTRING(st.n_group::varchar,1,1) as course
FROM student st
WHERE st.score = 1
EXCEPT SELECT DISTINCT stb.id, stb.name, stb.surname, stb.date_birth, SUBSTRING(stb.n_group::varchar,1,1) as course
FROM student_hobby sh, student stb
WHERE stb.id = sh.student_id AND sh.date_finish IS NULL
ORDER BY course, date_birth

№14 Создать представление, в котором отображается вся информация о студентах, которые продолжают заниматься хобби в данный момент и занимаются им как минимум 5 лет.
CREATE OR REPLACE VIEW Student_5yearhobby AS
SELECT st.*
FROM student st, student_hobby sh
WHERE st.id = sh.student_id AND sh.date_finish IS NULL AND (to_char('2025-05-10'::date, 'YYYY')::int * 12 * 30 + to_char('2025-05-10'::date, 'MM')::int * 30 + to_char('2025-05-10'::date, 'DD')::int - to_char(sh.date_start, 'YYYY')::int * 12 * 30 + to_char(sh.date_start, 'MM')::int * 30 + to_char(sh.date_start, 'DD')::int) / 30 / 12 >= 5

№17 Вывести всю информацию о студентах, занимающихся самым популярным хобби.
SELECT DISTINCT st.*
FROM student st, student_hobby sh
INNER JOIN
(
SELECT hb.name, hb.id
FROM hobby1 hb
INNER JOIN
(SELECT count(sh.student_id) as countofhob, sh.hobby_id
FROM student_hobby sh
GROUP BY sh.hobby_id) tt
ON tt.hobby_id = hb.id
ORDER BY tt.countofhob DESC
LIMIT 1
) tt
ON sh.hobby_id = tt.id
WHERE sh.student_id = st.id

№19 Вывести 10 студентов, которые занимаются одним (или несколькими) хобби самое продолжительно время.
SELECT st.name,st.surname
FROM student st
INNER JOIN
(SELECT DISTINCT sh.student_id, extract(day from (justify_days(now() - sh.date_start))) as countofdays
FROM student_hobby sh
WHERE sh.date_finish IS NULL
ORDER BY countofdays DESC) tt
ON tt.student_id = st.id
ORDER BY countofdays DESC LIMIT 2

№20 Вывести номера групп (без повторений), в которых учатся студенты из предыдущего запроса.
SELECT DISTINCT st.n_group
FROM student st
INNER JOIN(
SELECT st.name,st.surname, st.id
FROM student st
INNER JOIN
(SELECT DISTINCT sh.student_id, extract(day from (justify_days(now() - sh.date_start))) as countofdays
FROM student_hobby sh
WHERE sh.date_finish IS NULL
ORDER BY countofdays DESC) tt
ON tt.student_id = st.id
ORDER BY countofdays DESC LIMIT 10
) tt
ON tt.id = st.id

Однотабличные запросы
№1 Вывести всеми возможными способами имена и фамилии студентов, средний балл которых от 4 до 4.5
SELECT * FROM student st WHERE st.score BETWEEN 4.0 and 4.5

№2 Познакомиться с функцией CAST. Вывести при помощи неё студентов заданного курса (использовать Like)
SELECT st.name, st.surname FROM student st WHERE CAST (st.n_group AS varchar) LIKE '%20'

№3 Вывести всех студентов, отсортировать по убыванию номера группы и имени от а до я
SELECT * FROM student st ORDER BY st.n_group, st.name

№4 Вывести студентов, средний балл которых больше 4 и отсортировать по баллу от большего к меньшему
SELECT * FROM student st WHERE st.score > 4 ORDER BY st.score DESC

№5 Вывести на экран название и риск футбола и хоккея(т.к у меня нет хоккея, я вывел Волейбол.)
SELECT name, risk FROM hobby1 h WHERE h.name IN ('Футбол', 'Волейбол')

№6 Вывести id хобби и id студента которые начали заниматься хобби между двумя заданными датами (выбрать самим) и студенты должны до сих пор заниматься хобби
SELECT std.student_id, std.hobby_id FROM student_hobby std WHERE (std.date_finish BETWEEN '2019-01-15' AND '2021-10-12')
AND
(std.date_finish IS NULL)

№7 Вывести студентов, средний балл которых больше 4.5 и отсортировать по баллу от большего к меньшему
SELECT * FROM student st WHERE st.score >= 4.5 ORDER BY st.score DESC


№9 Выведите хобби и с использованием условного оператора сделайте риск словами:

>=8 - очень высокий
>=6 & <8 - высокий
>=4 & <8 - средний
>=2 & <4 - низкий
<2 - очень низкий
SELECT *,
CASE
WHEN bb.risk >= 8 THEN 'Очень высокий'
WHEN bb.risk < 8 AND bb.risk >= 6 THEN 'Высокий'
WHEN bb.risk < 6 AND bb.risk >= 4 THEN 'Средний'
WHEN bb.risk < 4 AND bb.risk >= 2 THEN 'Низкий'
ELSE 'Очень низкий'
END AS Category
FROM hobby1 bb

Групповые функции

№1 SELECT count(n_group), n_group
FROM student
GROUP BY n_group

№2 Выведите на экран для каждой группы максимальный средний балл
SELECT max(score), n_group
FROM student
GROUP BY n_group

№3 Подсчитать количество студентов с каждой фамилией 
SELECT count(surname), surname
FROM student
GROUP BY surname


№4 Подсчитать студентов, которые родились в каждом году
SELECT count(*), to_char(date_birth,'YYYY')
FROM student
GROUP BY to_char(date_birth,'YYYY')


№8 Для каждой группы в одном запросе вывести количество студентов, максимальный балл в группе, средний балл в группе, минимальный балл в группе
SELECT n_group, count(n_group), max(score), min(score)
FROM student
GROUP BY n_group


